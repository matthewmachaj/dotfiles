#-------------------------------------------------------------------------------
# Section: Reload Config
#
# See:
#   - https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/
#-------------------------------------------------------------------------------




#-------------------------------------------------------------------------------
# Section: Mouse Support
#-------------------------------------------------------------------------------
# Enable mouse mode; as of 2.1, this replaces the following:
#   set-window-option -g mode-mouse on
#   set-option -g mouse-select-pane on
#   set -g mouse-resize-pane on
#   set -g mouse-select-window on
set -g mouse on


#-------------------------------------------------------------------------------
# Seciont: General
#
# See:
#   - http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/
#   - "Tmux in practice: local and nested remote tmux sessions":
#   - https://www.freecodecamp.org/news/tmux-in-practice-local-and-nested-remote-tmux-sessions-4f7ba5db8795/
#   - https://github.com/samoshkin/tmux-config/blob/master/tmux/tmux.conf
#   - https://gist.github.com/paulodeleo/5594773
#-------------------------------------------------------------------------------
# ==========================
# ===  General settings  ===
# ==========================
set -g default-terminal "screen-256color"
set -g history-limit 20000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
setw -g allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize on

# Set to '0' to effectively disable the 'r' bind-key option
# Value is ms
set -g repeat-time 750   # 0.75 sec


# Start index of window/pane with 1, because we're humans, not computers set -g base-index 1 setw -g pane-base-index 1


setw -g mode-keys vi
#unbind [
#bind Escape copy-mode
#bind [ copy-mode
unbind p
bind-key p paste-buffer

# https://unix.stackexchange.com/questions/21742/renumbering-windows-in-tmux
set-option -g renumber-windows on

# Hit `Ctrl-B + [` to enter Copy Mode, then hit `Space` to start vim-style selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'


#-------------------------------------------------------------------------------
# [SECTION]
#
# Open pane/window in CWD
# http://unix.stackexchange.com/questions/12032/create-new-window-with-current-directory-in-tmux
#-------------------------------------------------------------------------------

#################################################################################

# NOTE:
# set-option == set
# set-window-option == setw

# Allow xterm titles in terminal window, terminal scrolling with scrollbar, and setting overrides of C-Up, C-Down, C-Left, C-Right
# (commented out because it disables cursor navigation in vim)
#set -g terminal-overrides "xterm*:XT:smcup@:rmcup@:kUP5=\eOA:kDN5=\eOB:kLFT5=\eOD:kRIT5=\eOC"

# This allows Roxterm color scheme changes to work with TMUX
#set -g default-terminal "screen-256color"


#------------------------------------------------------------------------------#
# Section: Display                                                             #
#
# Taken from:
# https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/
#------------------------------------------------------------------------------#
# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string "#I:#W"

# loud or quiet?
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off
setw -g monitor-activity off
set -g bell-action none

#  modes
setw -g clock-mode-colour colour5
setw -g mode-style 'fg=colour1 bg=colour18 bold'

# panes
set -g pane-border-style 'fg=colour19 bg=colour0'
set -g pane-active-border-style 'bg=colour0 fg=colour9'

# statusbar
set -g status-position bottom
set -g status-justify left
set -g status-style 'bg=colour18 fg=colour137 dim'
set -g status-left '[#{session_name} (#{session_stack})]'
set -g status-left-style 'fg=blue bold'
set -g status-right '#[fg=colour233,bg=colour19] %d/%m #[fg=colour233,bg=colour8] %H:%M:%S '
set -g status-right-length 50
set -g status-left-length 20

setw -g window-status-current-style 'fg=colour1 bg=colour19 bold'
setw -g window-status-current-format ' #I#[fg=colour249]:#[fg=colour255]#W#[fg=colour249]#F '
setw -g window-status-style 'fg=colour9 bg=colour18'
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
setw -g window-status-bell-style 'fg=colour255 bg=colour1 bold'

# messages
set -g message-style 'fg=colour232 bg=colour16 bold'

## =====================================
## ===           Theme               ===
## =====================================

## Feel free to NOT use this variables at all (remove, rename)
## this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

## This is a theme CONTRACT, you are required to define variables below
## Change values, but not remove/rename variables itself
color_main="$color_orange"
color_secondary="$color_purple"

color_dark="$color_black"
color_light="$color_white"

color_level_ok="$color_green"
color_level_stress="$color_red"
color_level_warn="$color_yellow"

color_session_text="$color_blue"
color_status_text="colour245"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

# Also, change some visual styles when window keys are off
bind-key -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind-key -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S


#------------------------------------------------------------------------------#
#                          Section: Key bindings                               #
#
# Note: to save a value into a variable, the only way I could find was with a
# command like below; be sure to note the -p on `tmux display` - w/o that flag,
# which causes printing to STDOUT, the value can't be captured in _VAR
#
#   tmux run-shell '_VAR=$(echo -n "window_index="; tmux display -p \
#     "#{window_index}"); tmux display $_VAR'
#------------------------------------------------------------------------------#

#--------------------------------------#
#             Configs                  #
#--------------------------------------#
# Tmux Config -> Reload
bind-key f source-file ~/.tmux.conf \; display "mmackey cmd - TMUX config reloaded"

# Tmux Config -> Edit then Reload
bind-key C-q new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# Tmux Config -> Reload
# Note: overridden by tmux-resurrect
bind-key C-r source-file ~/.tmux.conf \; display "Config reloaded"


#--------------------------------------#
#             Renames                  #
#--------------------------------------#
# Rename -> Session
unbind "\$" # rename-session
bind-key R command-prompt -I "#{session_name}" "rename-session '%%'"

# Rename -> Window
unbind ,    # rename-window
bind-key r command-prompt -I "#{window_name}" "rename-window '%%'"

# Rename -> Window (Prompt to rename window after new window created)
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'


#--------------------------------------#
#             Sessions                 #
#--------------------------------------#
# Session -> Kill w/ Confirm
bind-key Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Session -> Detach
bind-key d detach
bind-key D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Session -> Merge
# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind-key C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"


#--------------------------------------#
#             Windows                  #
#--------------------------------------#
# Window -> New
bind-key c new-window -c "#{pane_current_path}"

# Window -> Kill
unbind &
bind-key X kill-window

# Window -> Kill All w/ Confirm
bind-key C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"

# Window -> Last
unbind l
bind-key -r l last-window   # cycle thru MRU tabs

# Window -> Previous
unbind p
bind-key -r C-[ previous-window

# Window -> Next
unbind n
bind-key -r n next-window

# Window -> Link
bind-key L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# switch panes using Alt-arrow without prefix
bind-key -T prefix select-pane -L
bind-key -T prefix select-pane -R
bind-key -T prefix k select-pane -U
bind-key -T prefix j select-pane -D

# Window -> Select LEFT
bind-key -r -T prefix h select-window -t -1

# Window -> Select RIGHT
bind-key -r -T prefix L select-window -t +1

# Window -> Shift LEFT
# Note: ';' required at end of each line or shell commands cause errors
# Note: i believe the '\' at end of lines are line continuation for TMUX not Bash
unbind <
bind-key -r -T prefix < run-shell '                          \
  if [ $(tmux display -p "#{window_index}") != 1 ]; then     \
    tmux swap-window -t -1;                                  \
    tmux select-window -t -1;                                \
  else                                                       \
    tmux display "Cannot move window past first index: [1]"; \
  fi                                                         \
'

# Window -> Shift RIGHT
# Note: ';' required at end of each line or shell commands cause errors
# Note: I believe the '\' at end of lines are line continuation for TMUX not Bash
unbind >
bind-key -r -T prefix > run-shell '                                       \
  if [ $(tmux display -p -t :+1 \#\{window_index\}) != 1 ]; then          \
    tmux swap-window -t +1;                                               \
    tmux select-window -t +1;                                             \
  else                                                                    \
    tmux display "Cannot move window past last index: [#{window_index}]"; \
  fi                                                                      \
'

# Window > Insert window at INDEX_SPECIFIED+1
# Note: inserts window AFTER window index user enters
bind-key i command-prompt -p 'Insert window at:' '                               \
  run-shell "                                                                    \
    if tmux select-window -t %1; then                                            \
      tmux new-window -a -t \$((%1));                                        \
    else                                                                         \
	tmux display \"Window cannot be inserted at non-existent index: [%1]\" ; \
    fi;                                                                          \
  "                                                                              \
'
#--------------------------------------#
#               Panes                  #
#--------------------------------------#
# Pane -> Kill
bind-key x kill-pane

# Pane -> Split Horizontal
unbind %
bind-key % split-window -h -c "#{pane_current_path}"

# Pane -> Split Vertical
unbind '"'  # split-window
bind-key '"' split-window -v -c "#{pane_current_path}"

# Pane -> Focus through Panes
unbind o
bind-key -r o select-pane -t :.+

# Pane -> Swap
unbind "}"  # swap-pane -D
unbind "{"  # swap-pane -U
bind-key -r C-o swap-pane -D

# Pane -> Zoom
unbind z    # zoom-pane
bind-key z resize-pane -Z

# Pane -> Resize Up
unbind M-Up  # resize 5 rows up
bind-key -r -T C-Up resize-pane -U

# Pane -> Resize Down
unbind M-Down # resize 5 rows down
bind-key -r -T  C-Down resize-pane -D

# Pane -> Resize Left
unbind M-Left # resize 5 rows left
bind-key -r -T C-Left resize-pane -L

# Pane -> Resize Right
unbind M-Right # resize 5 rows right
bind-key -r -T C-Right resize-pane -R


# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
#bind \ if '[ #{pane_index} -eq 1 ]' \
#     'swap-pane -s "!"' \
#     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Hide status bar on demand
bind-key C-s if -F '#{s/off//:status}' 'set status off' 'set status on'


#--------------------------------------#
#               Menus                  #
#--------------------------------------#
# Custom MENU
unbind m
bind-key -T prefix m \
display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -x P -y P \
  "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r "copy-mode -t=; send -Xt= search-backward \"#{q:mouse_word}\"" \
  "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y "send-keys -l -- \"#{q:mouse_word}\"" \
  "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c "set-buffer -- \"#{q:mouse_word}\"" \
  "#{?mouse_line,Copy Line,}" l "set-buffer -- \"#{q:mouse_line}\"" \
  "Horizontal Split" h "split-window -h" \
  "Vertical Split" v "split-window -v" \
  "Swap Up" u "swap-pane -U" \
  "Swap Down" d "swap-pane -D" \
  "#{?pane_marked_set,,-}Swap Marked" s swap-pane \
  "Swap Left" l "swap-window -t:-1" \
  "Swap Right" r "swap-window -t:+1" \
  "#{?pane_marked_set,,-}Swap Marked" s swap-window \
  Kill X kill-pane \
  Respawn R "respawn-pane -k" \
  "#{?pane_marked,Unmark,Mark}" m "select-pane -m" \
  "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z" \
  Rename n "command-prompt -I \"#W\" \"rename-window -- '%%'\"" \
  "New After" w "new-window -a" \
  "New At End" W new-window


## ================================================
## ===     Copy mode, scroll and clipboard      ===
## ================================================
#set -g @copy_use_osc52_fallback off

## Prefer vi style key table
#setw -g mode-keys vi

#bind p paste-buffer
#bind C-p choose-buffer

## trigger copy mode by
#bind -n M-Up copy-mode

## Scroll up/down by 1 line, half screen, whole screen
bind-key -T copy-mode-vi M-Up              send-keys -X scroll-up
bind-key -T copy-mode-vi M-Down            send-keys -X scroll-down
bind-key -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind-key -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind-key -T copy-mode-vi PageDown          send-keys -X page-down
bind-key -T copy-mode-vi PageUp            send-keys -X page-up

## When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
#bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
#bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

## wrap default shell in reattach-to-user-namespace if available
## there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
## don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
#if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    #"run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

#yank="~/.tmux/yank.sh"
#yank="~/yank.sh"

## Copy selected text
#bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
#bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
#bind -T copy-mode-vi Y send-keys -X copy-line \;\
    #run "tmux save-buffer - | $yank"
#bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    #run "tmux save-buffer - | $yank"
#bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
#bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    #run "tmux save-buffer - | $yank"

## Copy selection on drag end event, but do not cancel copy mode and do not clear selection
## clear select on subsequence mouse click
#bind -T copy-mode-vi MouseDragEnd1Pane \
    #send-keys -X copy-pipe "$yank"
#bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   #send-keys -X clear-selection

## iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
## tmux show-options -g -s set-clipboard
## set-clipboard on|external




#------------------------------------------------------------------------------#
# Section: Plugins                                                             #
#------------------------------------------------------------------------------#

#---------------------------------------------------#
# TPM (Tmux Plugin Manager)
#---------------------------------------------------#
set -g @plugin 'tmux-plugins/tpm'


#---------------------------------------------------#
# tmux-resurrect                                    #
# https://github.com/tmux-plugins/tmux-resurrect    #
#---------------------------------------------------#
set -g @plugin 'tmux-plugins/tmux-resurrect'


#---------------------------------------------------#
# tmux-continuum                                    #
# https://github.com/tmux-plugins/tmux-continuum    #
#---------------------------------------------------#
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# Automatic restore
# Last saved environment is automatically restored when tmux is started.
# Note: automatic restore happens exclusively on tmux server start. No other
# action (e.g. sourcing .tmux.conf) triggers this
set -g @continuum-restore 'on'

# Systemd automatic start for tmux
# https://github.com/tmux-plugins/tmux-continuum/blob/master/docs/systemd_details.md
set -g @continuum-boot 'on'


#---------------------------------------------------#
# tmux-open                                         #
# https://github.com/tmux-plugins/tmux-open         #
#---------------------------------------------------#
set -g @plugin 'tmux-plugins/tmux-open'


#---------------------------------------------------#
# TPM - Enable                                      #
#---------------------------------------------------#
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'

