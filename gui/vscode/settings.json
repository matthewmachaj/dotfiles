{
  "vim.leader": ",",
  "vim.normalModeKeyBindings": [
    {
      "before" : ["<leader>","a"],
      "commands" : [
        "workbench.view.explorer"
      ]
    }
  ],
  "editor.tabSize": 2,
  "workbench.colorTheme": "Default Light+",
  "editor.formatOnSave": true,
  "workbench.startupEditor": "newUntitledFile",
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.minimap.enabled": false,
  "javascript.updateImportsOnFileMove.enabled": "always",
  "workbench.iconTheme": "material-icon-theme",
  "csharp.suppressHiddenDiagnostics": false,
  "omnisharp.enableDecompilationSupport": true,
  "workbench.settings.openDefaultKeybindings": true,
  "workbench.settings.openDefaultSettings": false,
  "workbench.settings.useSplitJSON": false,
  "editor.suggestSelection": "first",
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
  "java.home": "/home/mmackey/.jdks/openjdk-14.0.2",

  // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
  "editor.rulers": [80],

  // Controls how lines should wrap.
  //  - off: Lines will never wrap.
  //  - on: Lines will wrap at the viewport width.
  //  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
  //  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
  "editor.wordWrap": "on",

  // Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
  "editor.wordWrapColumn": 80,

  // Controls the indentation of wrapped lines.
  //  - none: No indentation. Wrapped lines begin at column 1.
  //  - same: Wrapped lines get the same indentation as the parent.
  //  - indent: Wrapped lines get +1 indentation toward the parent.
  //  - deepIndent: Wrapped lines get +2 indentation toward the parent.
  "editor.wrappingIndent": "same",

  // Controls the algorithm that computes wrapping points.
  //  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
  //  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
  "editor.wrappingStrategy": "simple",
  "python.languageServer": "Microsoft",
  "window.zoomLevel": -1,
  "extensions.ignoreRecommendations": true
}
