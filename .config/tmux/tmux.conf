#------------------------------------------------------------------------------#
#                            Section: General {{{                              #
#------------------------------------------------------------------------------#
#
# See:
#   - http://jasonwryan.com/blog/2011/06/07/copy-and-paste-in-tmux/
#   - "Tmux in practice: local and nested remote tmux sessions":
#   - https://www.freecodecamp.org/news/tmux-in-practice-local-and-nested-remote-tmux-sessions-4f7ba5db8795/
#   - https://github.com/samoshkin/tmux-config/blob/master/tmux/tmux.conf
#   - https://gist.github.com/paulodeleo/5594773
#------------------------------------------------------------------------------#
set-option -g prefix  C-a
set-option -g prefix2 M-f

setw -g  mode-keys         vi

# Have tmux create NON-login shells when creating new windows/panes
set-option -g default-command ${SHELL}

# Make Bash default shell for all new windows/panes (useful for OS's like Kali);
# this is used if the above ${SHELL} is blank
set-option -g default-shell /bin/zsh

set  -g  buffer-limit      20
set  -g  display-time      0     # Value of zero means a keypress is required to remove display msg
set  -gs escape-time       0
set  -g  history-limit     50000
set  -g  remain-on-exit    off

# See: https://jdhao.github.io/2018/10/19/tmux_nvim_true_color/
set  -g  default-terminal  "screen-256color"
set  -ga terminal-overrides ",xterm-256color*:Tc" # tell Tmux that outside terminal supports true color

setw -g  aggressive-resize on
setw -g  allow-rename      off
setw -g  automatic-rename  off
setw -g  aggressive-resize on

# Set to '0' to effectively disable the 'r' bind-key option
# Value is ms
set  -g repeat-time        750

# Enable mouse mode; as of 2.1, this replaces the following:
#   set-window-option -g mode-mouse on
#   set-option -g mouse-select-pane on
#   set -g mouse-resize-pane on
#   set -g mouse-select-window on
set  -g mouse               on

# }}} General

#------------------------------------------------------------------------------#
#                          Section: Key bindings {{{                           #
#------------------------------------------------------------------------------#
#                                                                              #
# Note: to save a value into a variable, the only way I could find was with a  #
# command like below; be sure to note the -p on `tmux display` - w/o that flag,#
# which causes printing to STDOUT, the value can't be captured in _VAR         #
#                                                                              #
#   tmux run-shell '_VAR=$(echo -n "window_index="; tmux display -p \          #
#       "#{window_index}"); tmux display $_VAR'                                #
#                                                                              #
#------------------------------------------------------------------------------#

#--------------------------------------#
#             Configs {{{              #
#--------------------------------------#
TMUX_CONF=$HOME/.config/tmux/tmux.conf
bind-key .   source-file $TMUX_CONF \; display "Config reloaded"  # Reload

# TODO: fix this
# bind-key C-q new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} \
#   ~/.tmux.conf  && tmux source ~/.tmux.conf && tmux display \
#   \"Config reloaded\"'"                                             # Edit then reload

#   }}}


#--------------------------------------#
#         External Commands {{{                #
#--------------------------------------#
unbind -n C-M-n
# bind-key -n C-M-n new-session \; command-prompt -I "#{session_name}" "rename-session '%%'"

bind-key -n C-M-j switch-client -n   # Next session
bind-key -n C-M-k switch-client -p   # Prev session

# Edit vimrc file w/ keybindings
bind-key -n C-M-v new-window -n 'EDIT vimrc-common.vim' "zsh -c 'nvim \$VIMRC'"

# CUSTOM session switchers
bind-key -n C-M-b switch-client -t ansible
bind-key -n C-M-n new-session -A -s notes
bind-key -n C-M-s new-session -A -s src

bind-key -n C-M-h switch-client -t dotfiles:dotfiles  # dotfiles window
# bind-key -n C-M-n switch-client -t dotfiles:nvim      # Neovim window
bind-key -n C-M-a switch-client -t dotfiles:awesome   # Awesome window


bind-key -n C-M-l last-window

#   }}}

#--------------------------------------#
#             Renames {{{              #
#--------------------------------------#
unbind "\$" # rename-session
unbind ,    # rename-window

bind-key R command-prompt -I "#{session_name}" "rename-session '%%'"
bind-key r command-prompt -I "#{window_name}" "rename-window '%%'"

#   }}}

#--------------------------------------#
#             Sessions {{{             #
#--------------------------------------#
bind-key Q    confirm-before -p "kill-session #S? (y/n)" kill-session # Kill w/ Confirm
bind-key d    detach
bind-key D    if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Session -> Merge
# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind-key C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

#   }}}

#--------------------------------------#
#             Windows {{{              #
#--------------------------------------#
unbind &
unbind l
unbind p
unbind n

set  -g renumber-windows on
set  -g base-index 1
setw -g pane-base-index 1

bind-key    c new-window -c "#{pane_current_path}" -n "SHELL" \; command-prompt -I "#{window_name}" "rename-window '%%'"

# Kill All w/ Confirm
bind-key    C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind-key    X   kill-window

bind-key    ,   last-window
bind-key -n M-Space last-window
bind-key -r p   previous-window
bind-key -r n   next-window
bind-key -r H   select-window  -t -1          # Select Left
bind-key -r L   select-window  -t +1          # Select Right
bind-key -n M-1 select-window  -t 1
bind-key -n M-2 select-window  -t 2
bind-key -n M-3 select-window  -t 3
bind-key -n M-4 select-window  -t 4
bind-key -n M-5 select-window  -t 5
bind-key -n M-6 select-window  -t 6
bind-key -n M-7 select-window  -t 7
bind-key -n M-8 select-window  -t 8
bind-key -n M-9 select-window  -t 9

# Window -> Link w/ Other Window
bind-key    C-e command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Window -> Shift LEFT
# Note: ';' required at end of each line or shell commands cause errors
# Note: i believe the '\' at end of lines are line continuation for TMUX not Bash
unbind <
bind-key -r -T prefix < run-shell '                          \
  if [ $(tmux display -p "#{window_index}") != 1 ]; then     \
    tmux swap-window -t -1;                                  \
    tmux select-window -t -1;                                \
  else                                                       \
    tmux display "Cannot move window past first index: [1]"; \
  fi                                                         \
'

# Window -> Shift RIGHT
# Note: ';' required at end of each line or shell commands cause errors
# Note: I believe the '\' at end of lines are line continuation for TMUX not Bash
unbind >
bind-key -r -T prefix > run-shell '                                       \
  if [ $(tmux display -p -t :+1 \#\{window_index\}) != 1 ]; then          \
    tmux swap-window -t +1;                                               \
    tmux select-window -t +1;                                             \
  else                                                                    \
    tmux display "Cannot move window past last index: [#{window_index}]"; \
  fi                                                                      \
'

# Window > Insert window at INDEX_SPECIFIED+1
# Note: inserts window AFTER window index user enters
bind-key i command-prompt -p 'Insert window at:' '                               \
  run-shell "                                                                    \
    if tmux select-window -t %1; then                                            \
      tmux new-window -a -t \$((%1));                                        \
    else                                                                         \
	tmux display \"Window cannot be inserted at non-existent index: [%1]\" ; \
    fi;                                                                          \
  "                                                                              \
'

#   }}}

#--------------------------------------#
#               Panes {{{              #
#--------------------------------------#
unbind %
unbind '"'  # split-window
unbind o
unbind "}"  # swap-pane -D
unbind "{"  # swap-pane -U
unbind z    # zoom-pane
unbind M-Up
unbind M-Down
unbind M-Left
unbind M-Right

resize_pane_adjustment=8
bind-key x           kill-pane                                  # Kill pane
bind-key %           split-window -h -c "#{pane_current_path}"  # Split Horizontal
bind-key '"'         split-window -v -c "#{pane_current_path}"  # Split vertical

bind-key -r C-o      swap-pane    -D                            # Swap panes

# Select last used pane AND zoom
# bind-key -n C-Space  last-pane \; resize-pane -Z\; display-message -p "Switched to pane [#P : #{pane_current_path}]"

# bind-key -n C-Space  last-pane \; resize-pane -Z\;

# Select next pane and zoom (restart at 1st index if on last pane)
bind-key -n C-Space  select-pane -t :.+ \; resize-pane -Z\;
bind-key -r o        select-pane  -t :.+                        # Select next pane
# Not using the following b/c 'k' is common key pressed next in next pane (ie- Vim)
# bind-key -r k        select-pane  -t :.-                        # Select previous pane

bind-key    h        select-pane  -L                            # Select Left
bind-key    j        select-pane  -D                            # Select Down
bind-key    k        select-pane  -U                            # Select Up
bind-key    l        select-pane  -R                            # Select Right

bind-key -r C-k      resize-pane  -U $resize_pane_adjustment    # Resize Up
bind-key -r C-j      resize-pane  -D $resize_pane_adjustment    # Resize Down
bind-key -r C-h      resize-pane  -L $resize_pane_adjustment    # Resize Left
bind-key -r C-l      resize-pane  -R $resize_pane_adjustment    # Resize Right
bind-key -n C-_      resize-pane  -Z                            # Zoom pane
bind-key    z        resize-pane  -Z                            # Zoom pane
bind-key    a        setw            synchronize-panes\; \
                                       display-message "sync-panes=#{?pane_synchronized,on,off}"

#   }}}

#--------------------------------------#
#         Menus & Status Bar {{{       #
#--------------------------------------#
# Menu -> Custom
unbind m
bind-key -T prefix m \
display-menu -T "#[align=centre]#{pane_index} (#{pane_id})" -x P -y P \
  "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" C-r "copy-mode -t=; send -Xt= search-backward \"#{q:mouse_word}\"" \
  "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" C-y "send-keys -l -- \"#{q:mouse_word}\"" \
  "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" c "set-buffer -- \"#{q:mouse_word}\"" \
  "#{?mouse_line,Copy Line,}" l "set-buffer -- \"#{q:mouse_line}\"" \
  "Horizontal Split" h "split-window -h" \
  "Vertical Split" v "split-window -v" \
  "Swap Up" u "swap-pane -U" \
  "Swap Down" d "swap-pane -D" \
  "#{?pane_marked_set,,-}Swap Marked" s swap-pane \
  "Swap Left" l "swap-window -t:-1" \
  "Swap Right" r "swap-window -t:+1" \
  "#{?pane_marked_set,,-}Swap Marked" s swap-window \
  Kill X kill-pane \
  Respawn R "respawn-pane -k" \
  "#{?pane_marked,Unmark,Mark}" m "select-pane -m" \
  "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z" \
  Rename n "command-prompt -I \"#W\" \"rename-window -- '%%'\"" \
  "New After" w "new-window -a" \
  "New At End" W new-window

# Status Bar -> Toggle show/hide
bind-key -T prefix M-s if -F '#{s/off//:status}' 'set status off' 'set status on'

#   }}}

# }}} Keybindings

#------------------------------------------------------------------------------#
#                          Section: Display {{{                                #
#------------------------------------------------------------------------------#
#                                                                              #
# Taken from:                                                                  #
# https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/         #
#------------------------------------------------------------------------------#
# Set parent terminal title to reflect current window in tmux session
set -g set-titles                    on
set -g set-titles-string             "#I:#W"

# Loud or quiet?
set  -g activity-action              any
set  -g bell-action                  any
set  -g monitor-bell                 on
set  -g visual-activity              on
set  -g visual-silence               off
# Setting this to 'on' will show a message on status line anytime you do anything in a pane
set  -g monitor-activity             off
# Setting to 'off' highlights pane of bell but does not show message on status bar when bell occurs
set  -g visual-bell                  off

# Modes
setw -g clock-mode-colour            colour5
setw -g mode-style                   'fg=colour1 bg=colour18 bold'

# Panes
set  -g pane-border-style            'fg=colour19 bg=colour0'
set  -g pane-active-border-style     'bg=colour0 fg=colour9'

# Statusbar
set  -g status-position              bottom
set  -g status-justify               left
set  -g status-style                 'bg=colour18 fg=colour137 dim'

# session-stack - list of window #'s in order they were last accessed
#set  -g status-left                  '[#{session_name}-#{session_stack}]'
set  -g status-left                  ' [#{session_name}] '
set  -g status-left-style            'fg=white,bg=red,bright'
set  -g status-left-length           20
set  -g status-right                 '#[fg=colour233,bg=colour19] %d/%m #[fg=colour233,bg=colour8] %H:%M:%S '
set  -g status-right-length          50

setw -g window-status-bell-style     'fg=colour255 bg=colour1 bold'
# setw -g window-status-current-format ' #I#[fg=colour249]:#[fg=colour255]#W#[fg=colour249]#F '
setw -g window-status-current-format '#{?window_zoomed_flag,#[fg=yellow],} #I [#W:#P] #F'

setw -g window-status-current-style  'fg=colour1 bg=colour19 bold'
setw -g window-status-format         ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
setw -g window-status-style          'fg=colour9 bg=colour18'

# messages
set  -g message-style                'fg=colour232 bg=colour16 bold'


#--------------------------------------#
#              Theme                   #
#--------------------------------------#

## Feel free to NOT use this variables at all (remove, rename)
## this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

## This is a theme CONTRACT, you are required to define variables below
## Change values, but not remove/rename variables itself
color_main="$color_orange"
color_secondary="$color_purple"

color_dark="$color_black"
color_light="$color_white"

color_level_ok="$color_green"
color_level_stress="$color_red"
color_level_warn="$color_yellow"

color_session_text="$color_blue"
color_status_text="colour245"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"

# Also, change some visual styles when window keys are off
bind-key -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind-key -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S

# }}} Display

#------------------------------------------------------------------------------#
#                      Section: Copy/Paste/Scroll {{{                          #
# https://www.freecodecamp.org/news/tmux-in-practice-integration-with-system-clipboard-bcd72c62ff7b/
#
#
# `copy-pipe` command stores selected text in tmux buffer same to
# `copy-selection`, plus pipes selected text to the given command. So we get
# text stored in two places: the tmux copy buffer and the system clipboard.
#
#------------------------------------------------------------------------------#
# Enter Copy mode
unbind [
# <Shift-u> is `update_plugins`
bind-key k copy-mode

# set-clipboard already set to "external"
#   `tmux show-options -g -s set-clipboard`
set -g set-clipboard external

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind-key -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind-key -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down


# }}} Copy/Paste/Scroll

#------------------------------------------------------------------------------#
#                           Section: Plugins {{{                               #
#------------------------------------------------------------------------------#
TMUX_PLUGIN_MANAGER_PATH=~/.config/tmux/plugins
set-environment -g TMUX_PLUGIN_MANAGER_PATH "$TMUX_PLUGIN_MANAGER_PATH"

set -g @plugin 'tmux-plugins/tpm'

# continuous saving of tmux environment
# automatic tmux start when computer/server is turned on
# automatic restore when tmux is started
set -g @plugin 'tmux-plugins/tmux-continuum'


# regex searches (native support added in tmux 3.1)
# search result highlighting
# predefined searches (ie - for files, URLs, IPs and more)
set -g @plugin 'tmux-plugins/tmux-copycat'


# Plugin for opening highlighted selection directly from Tmux copy mode.
set -g @plugin 'tmux-plugins/tmux-open'


# Restore tmux environment after system restart
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-strategy-nvim 'session' # supposed to enable automatic opening of Nvim session if Session.vim present
set -g @resurrect-processes 'ssh vim nvim' # set of programs that will be restored by resurrect
set -g @resurrect-capture-pane-contents 'on'


# Copy to the system clipboard in tmux
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_action 'copy-pipe' # Stay in copy-mode after yank
set -g @yank_selection_mouse 'clipboard' # Which clipboard to use [clipboar|primary|secondary]

#---------------------------------------------------#
# tmux-continuum                                    #
# https://github.com/tmux-plugins/tmux-continuum    #
#---------------------------------------------------#
# Automatic restore
# Last saved environment is automatically restored when tmux is started.
# Note: automatic restore happens exclusively on tmux server start. No other
# action (e.g. sourcing .tmux.conf) triggers this
set -g @continuum-restore 'on'

# Systemd automatic start for tmux
# https://github.com/tmux-plugins/tmux-continuum/blob/master/docs/systemd_details.md
set -g @continuum-boot 'on'

# }}} Plugins

#------------------------------------------------------------------------------#
#                           Section: INCLUDES {{{                              #
#------------------------------------------------------------------------------#
source-file $LOCAL_DOTDIR/tmux.conf
# }}} Includes


#---------------------------------------------------#
# TPM - Enable                                      #
#---------------------------------------------------#
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b "$TMUX_PLUGIN_MANAGER_PATH/tpm/tpm"


# vim: ft=tmux foldlevel=0 foldmethod=marker
