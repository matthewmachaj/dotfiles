#-------------------------------------------------------------------------------
# ~/.config/sh/rc
#
# This is a common "rc" script but it is not strict Bourne-shell syntax.  It
# contains Bash shell syntax, like arrays, which will work in both Bash and Zsh
# shells.
#
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Simply RETURN when this is NOT sourced in an interactive session
# (SCP will not work w/o this b/c if you have 'echo' statements in your .rc's)
#
# NOTE: Ansible runs in non-interactive session so this applies to Ansible as well
# SEE: https://unix.stackexchange.com/a/18647/408519
#-------------------------------------------------------------------------------
# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Include common shell functions
source $DOTDIR/lib/common.sh

# Any printing must be after interactive shell confirmation
section "Sourcing -> ~/.config/sh/rc"


#---------------------------------------
# [PATH Setup] {{{
#---------------------------------------
mkdir_if_not_exist $HOME/.local/bin

BIN_DIRS=(
  $HOME/.local/bin
  $PERSONAL/bin
  /opt/bin
)

for _dir in ${BIN_DIRS[@]}; do
  if [[ -d $_dir ]]; then
    export PATH="$_dir:$PATH"
  fi
done
# }}}


#---------------------------------------
# [SOURCE Common Shell Files] {{{
#---------------------------------------
export SH_DOTDIR=$DOTDIR/.config/sh

FILES_TO_SOURCE=()
FILES_TO_SOURCE+=($SH_DOTDIR/aliases)
FILES_TO_SOURCE+=($(find $SH_DOTDIR/includes -type f))

for _file in ${FILES_TO_SOURCE[@]}; do
  source_file_if_exists $_file
done
# }}}


#---------------------------------------
# [base16-shell] {{{
#---------------------------------------
if [[ ! -d ~/.config/base16-shell/.git ]]; then
  git clone https://github.com/chriskempson/base16-shell.git ~/.config/base16-shell
fi

BASE16_SHELL="$HOME/.config/base16-shell"
[[ -n "$PS1" ]] \
  && [[ -s "$BASE16_SHELL/profile_helper.sh" ]] \
    && eval "$("$BASE16_SHELL/profile_helper.sh")"
# }}}


#---------------------------------------
# [Function - Source Local Dotfiles] {{{
#---------------------------------------
# Define common function to be called after other main shell initializations
# complete (Bash, ZSH, etc.) that will source local dotfile overrides
#
# NOTE: this can only work if the local dotfiles are cross-shell-compatible
source_local_dotfiles() {
  section "Sourcing -> ~/.local/dotfiles"

  local _files_to_source=()
  _files_to_source+=($LOCAL_DOTDIR/rc)
  _files_to_source+=($LOCAL_DOTDIR/aliases)

  for _file in ${_files_to_source[@]}; do
    source_file_if_exists $_file
  done
}
# }}}


# vim: ft=bash  foldlevel=0 foldmarker={{{,}}} foldmethod=marker
